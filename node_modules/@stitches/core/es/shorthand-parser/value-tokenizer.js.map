{"version":3,"file":"value-tokenizer.js","sourceRoot":"","sources":["../../src/shorthand-parser/value-tokenizer.ts"],"names":[],"mappings":"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","sourcesContent":["const TOKEN_STRING = 1;\nconst TOKEN_QUOTED_STRING = 2;\nconst TOKEN_FUNCTION = 3;\nconst TOKEN_BRACKET = 4;\n\ntype TokenType =\n  | typeof TOKEN_STRING\n  | typeof TOKEN_QUOTED_STRING\n  | typeof TOKEN_FUNCTION\n  | typeof TOKEN_BRACKET\n  | 0;\n\nlet currentType: TokenType;\nlet currentToken = \"\";\nlet currentDepth = 0;\nlet tokenGroups: string[][] = [[]];\n\nexport const tokenizeValue = (str: string) => {\n  resetCurrentToken();\n  tokenGroups = [[]];\n  if (!str) {\n    return tokenGroups;\n  }\n  const strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    const char = str[i];\n    switch (char) {\n      // whitespace\n      case \" \":\n        if (currentType === TOKEN_STRING) {\n          addCurrentTokenToGroup();\n        } else if (currentType) {\n          currentToken += char;\n        }\n        break;\n      // new token group\n      case \",\":\n        if (!currentDepth) {\n          addCurrentTokenToGroup();\n          addNewTokenGroup();\n        } else {\n          currentToken += char;\n        }\n        break;\n\n      // Quoted string:\n      case '\"':\n        currentToken += char;\n        if (!currentDepth && !currentType) {\n          currentType = TOKEN_QUOTED_STRING;\n          currentDepth = 1;\n        } else if (currentDepth === 1 && currentType === TOKEN_QUOTED_STRING) {\n          currentDepth = 0;\n          addCurrentTokenToGroup();\n        }\n        break;\n\n      // Css function:\n      case \"(\":\n        if (!currentDepth) currentType = TOKEN_FUNCTION;\n        currentDepth++;\n        currentToken += char;\n        break;\n\n      case \")\":\n        currentToken += char;\n        currentDepth--;\n        if (currentType === TOKEN_FUNCTION && !currentDepth)\n          addCurrentTokenToGroup();\n        break;\n\n      // Bracket values:\n      case \"[\":\n        if (!currentDepth) currentType = TOKEN_BRACKET;\n        currentToken += char;\n        currentDepth++;\n        break;\n      case \"]\":\n        currentToken += char;\n        currentDepth--;\n        if (!currentDepth) addCurrentTokenToGroup();\n        break;\n\n      default:\n        if (!currentType) currentType = TOKEN_STRING;\n        currentToken += char;\n    }\n  }\n  if (currentToken) addCurrentTokenToGroup();\n  return tokenGroups;\n};\n/**\n * UTILS:\n */\n\n/**\n * Resets the current token info\n */\nfunction resetCurrentToken() {\n  currentDepth = currentType = 0;\n  currentToken = \"\";\n}\n/**\n * Adds current token to the stack then starts a new one\n */\nfunction addCurrentTokenToGroup() {\n  if (currentType) tokenGroups[tokenGroups.length - 1].push(currentToken);\n  resetCurrentToken();\n}\n/**\n * Adds a new token group and requests a new one\n * For things like animations or box shadow where there might be multiple rules\n * applied to the same value\n */\nfunction addNewTokenGroup() {\n  tokenGroups[tokenGroups.length] = [];\n  resetCurrentToken();\n}\n"]}