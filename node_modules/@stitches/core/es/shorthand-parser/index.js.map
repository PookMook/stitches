{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/shorthand-parser/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAElD,IAAM,SAAS,GAAG,iBAAiB,CAAC;AACpC,IAAM,WAAW,GAAG,qEAAqE,CAAC;AAE1F,IAAM,eAAe,GAAG,UAAC,aAAqB,EAAE,KAAa;IAC3D,OAAA,aAAa,CAAC,CAAC,CAAI,aAAa,SAAI,KAAO,CAAC,CAAC,CAAC,KAAK;AAAnD,CAAmD,CAAC;AAEtD,IAAM,WAAW,GAAQ,EAAE,CAAC;AAC5B,UAAU,CAAC,OAAO,CAAC,UAAC,IAAI,IAAK,OAAA,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAxB,CAAwB,CAAC,CAAC;AAEvD;;;EAGE;AAEF,IAAM,oBAAoB,GAAG,UAAC,IAAS,IAAK,OAAA,UAAC,MAAW,EAAE,KAAU;IAClE,IAAM,MAAM,GACV,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC/D,IAAM,GAAG,GAAG,EAAE,CAAC;IACf,sBAAsB;IACtB,IAAM,SAAS,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC;IAEnE,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,UAAU;QAC/B,2BAA2B;QAC3B,KAAK,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,KAAK;YAC1B,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,GAAG,CAAC;AACb,CAAC,EAf2C,CAe3C,CAAC;AAEF,MAAM,CAAC,IAAM,UAAU,GAAG,oBAAoB,CAC5C,UACE,MAAW,EACX,GAAQ,EACR,KAAU,EACV,KAAU,EACV,KAAU,EACV,UAAe,EACf,MAAW;IAEX,IAAI,KAAK,KAAK,GAAG,EAAE;QACjB,OAAO;KACR;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC;QAC1C,GAAG,CAAC,oBAAoB,GAAG,eAAe,CACxC,GAAG,CAAC,oBAAoB,EACxB,KAAK,CACN,CAAC;SACC,IACH,KAAK,CAAC,KAAK,CAAC,yDAAyD,CAAC;QAEtE,GAAG,CAAC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;SAC/D,IAAI,KAAK,CAAC,KAAK,CAAC,yCAAyC,CAAC,EAAE;QAC/D,IACE,KAAK,CAAC,MAAM,CAAC,UAAC,SAAc;YAC1B,OAAA,SAAS,CAAC,KAAK,CAAC,yCAAyC,CAAC;QAA1D,CAA0D,CAC3D,CAAC,MAAM,KAAK,CAAC,EACd;YACA,GAAG,CAAC,gBAAgB,GAAG,eAAe,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;YACpE,GAAG,CAAC,cAAc,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM,IACL,KAAK,CAAC,SAAS,CAAC,UAAC,SAAc;YAC7B,OAAA,SAAS,CAAC,KAAK,CAAC,yCAAyC,CAAC;QAA1D,CAA0D,CAC3D,KAAK,KAAK,EACX;YACA,GAAG,CAAC,gBAAgB,GAAG,eAAe,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;SACrE;aAAM;YACL,GAAG,CAAC,cAAc,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;SACjE;KACF;SAAM,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QACnC,GAAG,CAAC,cAAc,GAAG,eAAe,CAClC,GAAG,CAAC,cAAc,EAClB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAC7B,CAAC;KACH;SAAM,IACL,KAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC;QAC3C,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;QACtB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;QAEnB,GAAG,CAAC,kBAAkB,GAAG,eAAe,CACtC,GAAG,CAAC,kBAAkB,EACtB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAC7B,CAAC;SACC,IAAI,KAAK,CAAC,KAAK,CAAC,gDAAgD,CAAC;QACpE,GAAG,CAAC,gBAAgB,GAAG,eAAe,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;SACjE;QACH,IAAI,UAAU,KAAK,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACpC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;SACzE;QACD,GAAG,CAAC,eAAe,GAAG,eAAe,CACnC,GAAG,CAAC,eAAe,EACnB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAC9B,CAAC;KACH;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,SAAS,GAAG,oBAAoB,CAC3C,UAAC,CAAM,EAAE,GAAQ,EAAE,KAAU,EAAE,KAAU,EAAE,KAAU;IACnD,IAAI,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;QAC5B,GAAG,CAAC,uBAAuB,GAAG,eAAe,CAC3C,GAAG,CAAC,uBAAuB,EAC3B,KAAK,CACN,CAAC;KACH;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE;QACxC,GAAG,CAAC,uBAAuB,GAAG,eAAe,CAC3C,GAAG,CAAC,uBAAuB,EAC3B,KAAK,CACN,CAAC;KACH;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,4CAA4C,CAAC,EAAE;QACpE,GAAG,CAAC,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;KACzE;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,6BAA6B,CAAC,EAAE;QACrD,GAAG,CAAC,iBAAiB,GAAG,eAAe,CAAC,GAAG,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;KACvE;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE;QACxC,GAAG,CAAC,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;KACzE;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;QACjC,IAAI,KAAK,CAAC,SAAS,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAArB,CAAqB,CAAC,KAAK,KAAK,EAAE;YACnE,GAAG,CAAC,iBAAiB,GAAG,eAAe,CAAC,GAAG,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;SACvE;aAAM;YACL,GAAG,CAAC,cAAc,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;SACjE;KACF;SAAM;QACL,GAAG,CAAC,aAAa,GAAG,eAAe,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;KAC/D;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,IAAI,GAAG,oBAAoB,CACtC,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU;IAChC,IAAI,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC;QAAE,GAAG,CAAC,SAAS,IAAI,MAAI,KAAO,CAAC;SACxD,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QACpB,IAAA,KAAyB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,EAAxC,QAAQ,QAAA,EAAE,UAAU,QAAoB,CAAC;QAChD,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC;QACtD,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC;KAC/D;SAAM,IACL,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;QACtB,KAAK,CAAC,KAAK,CACT,gEAAgE,CACjE;QACD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;QAEvB,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;SAC7C,IAAI,KAAK,CAAC,KAAK,CAAC,uBAAuB,CAAC;QAAE,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC;SAChE,IAAI,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC;QAC9D,GAAG,CAAC,UAAU;YACZ,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC;SAC3D,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;QACxD,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;SAC7C;QACH,GAAG,CAAC,UAAU,GAAG,eAAe,CAC9B,GAAG,CAAC,UAAU,EACd,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAC7B,CAAC;KACH;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,UAAU,GAAG,oBAAoB;AAC5C,6EAA6E;AAC7E,UAAC,CAAM,EAAE,GAAQ,EAAE,KAAU,EAAE,KAAU,EAAE,KAAU;IACnD,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;QAC1B,IAAI,KAAK,CAAC,SAAS,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAArB,CAAqB,CAAC,KAAK,KAAK,EAAE;YACnE,GAAG,CAAC,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;SACzE;aAAM;YACL,GAAG,CAAC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;SACnE;KACF;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;QACnC,GAAG,CAAC,wBAAwB,GAAG,eAAe,CAC5C,GAAG,CAAC,wBAAwB,EAC5B,KAAK,CACN,CAAC;KACH;SAAM;QACL,GAAG,CAAC,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;KACzE;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,MAAM,GAAG,oBAAoB,CACxC,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU,EAAE,KAAU;IAC5C,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAC7C,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAC/C,GAAG,CAAC,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAChD,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC/C;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAC/C,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC/C;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KACjD;SAAM;QACL,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC/C;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,OAAO,GAAG,oBAAoB,CACzC,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU,EAAE,KAAU;IAC5C,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAC9C,GAAG,CAAC,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAChD,GAAG,CAAC,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACjD,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAChD;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAChD,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAChD;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAClD;SAAM;QACL,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAChD;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,MAAM,GAAG,oBAAoB,CACxC,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU;IAChC,IACE,KAAK,CAAC,KAAK,CACT,kEAAkE,CACnE,EACD;QACA,GAAG,CAAC,cAAc,GAAG,KAAK,CAAC;QAC3B,GAAG,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC7B,GAAG,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC9B,GAAG,CAAC,eAAe,GAAG,KAAK,CAAC;KAC7B;SAAM,IACL,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;QACtB,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;QAC1B,CAAC,KAAK,CAAC,KAAK,CAAC,EACb;QACA,GAAG,CAAC,cAAc,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACzD,GAAG,CAAC,gBAAgB,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAC3D,GAAG,CAAC,iBAAiB,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAC5D,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC3D;SAAM;QACL,GAAG,CAAC,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACnD,GAAG,CAAC,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACrD,GAAG,CAAC,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACtD,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KACrD;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,SAAS,GAAG,oBAAoB,CAC3C,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU;IAChC,IACE,KAAK,CAAC,KAAK,CACT,kEAAkE,CACnE,EACD;QACA,GAAG,CAAC,cAAc,GAAG,KAAK,CAAC;KAC5B;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;QAC/D,GAAG,CAAC,cAAc,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC1D;SAAM;QACL,GAAG,CAAC,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KACpD;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,WAAW,GAAG,oBAAoB,CAC7C,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU;IAChC,IACE,KAAK,CAAC,KAAK,CACT,kEAAkE,CACnE,EACD;QACA,GAAG,CAAC,gBAAgB,GAAG,KAAK,CAAC;KAC9B;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;QAC/D,GAAG,CAAC,gBAAgB,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC5D;SAAM;QACL,GAAG,CAAC,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KACtD;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,UAAU,GAAG,oBAAoB,CAC5C,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU;IAChC,IACE,KAAK,CAAC,KAAK,CACT,kEAAkE,CACnE,EACD;QACA,GAAG,CAAC,eAAe,GAAG,KAAK,CAAC;KAC7B;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;QAC/D,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC3D;SAAM;QACL,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KACrD;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,YAAY,GAAG,oBAAoB,CAC9C,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU;IAChC,IACE,KAAK,CAAC,KAAK,CACT,kEAAkE,CACnE,EACD;QACA,GAAG,CAAC,iBAAiB,GAAG,KAAK,CAAC;KAC/B;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;QAC/D,GAAG,CAAC,iBAAiB,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC7D;SAAM;QACL,GAAG,CAAC,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KACvD;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,WAAW,GAAG,oBAAoB,CAC7C,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU,EAAE,KAAU;IAC5C,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,GAAG,CAAC,cAAc,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACzD,GAAG,CAAC,gBAAgB,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAC3D,GAAG,CAAC,iBAAiB,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAC5D,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC3D;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,gBAAgB,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAC3D,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC3D;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,iBAAiB,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC7D;SAAM;QACL,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC3D;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,WAAW,GAAG,oBAAoB,CAC7C,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU,EAAE,KAAU;IAC5C,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,GAAG,CAAC,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACnD,GAAG,CAAC,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACrD,GAAG,CAAC,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACtD,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KACrD;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACrD,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KACrD;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KACvD;SAAM;QACL,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KACrD;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,WAAW,GAAG,oBAAoB,CAC7C,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU,EAAE,KAAU;IAC5C,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,GAAG,CAAC,cAAc,GAAG,KAAK,CAAC;QAC3B,GAAG,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC7B,GAAG,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC9B,GAAG,CAAC,eAAe,GAAG,KAAK,CAAC;KAC7B;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC7B,GAAG,CAAC,eAAe,GAAG,KAAK,CAAC;KAC7B;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,iBAAiB,GAAG,KAAK,CAAC;KAC/B;SAAM;QACL,GAAG,CAAC,eAAe,GAAG,KAAK,CAAC;KAC7B;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,YAAY,GAAG,oBAAoB,CAC9C,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAU,EAAE,KAAU;IAC5C,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,GAAG,CAAC,sBAAsB,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QAC1D,GAAG,CAAC,mBAAmB,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACvD,GAAG,CAAC,oBAAoB,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACxD,GAAG,CAAC,uBAAuB,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC5D;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,oBAAoB,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;QACxD,GAAG,CAAC,sBAAsB,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC3D;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,uBAAuB,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC5D;SAAM,IAAI,KAAK,KAAK,CAAC,EAAE;QACtB,GAAG,CAAC,sBAAsB,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAC3D;AACH,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,MAAW,EAAE,KAAa;IAClD,OAAO;QACL,SAAS,EAAE,aAAa,CAAC,KAAK,CAAC;aAC5B,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,EAAzB,CAAyB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAvD,CAAuD,CAAC;aACvE,IAAI,CAAC,IAAI,CAAC;KACd,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { tokenTypes } from \"../constants\";\nimport { tokenizeValue } from \"./value-tokenizer\";\n\nconst unitMatch = /^[0-9.]+[a-z|%]/;\nconst easingMatch = /\\(.*\\)|ease|ease-in|ease-out|ease-in-out|linear|step-start|step-end/;\n\nconst setChainedValue = (existingValue: string, value: string) =>\n  existingValue ? `${existingValue},${value}` : value;\n\nconst emptyTokens: any = {};\ntokenTypes.forEach((type) => (emptyTokens[type] = {}));\n\n/*\n  The generic CSS prop value parser. Converts any css value into an\n  array of chains, where each chain is an array of individual values\n*/\n\nconst createPropertyParser = (type: any) => (tokens: any, value: any) => {\n  const chains: any[][] =\n    typeof value === \"number\" ? [[value]] : tokenizeValue(value);\n  const css = {};\n  // TODO: refactor this\n  const tmpTokens = typeof value === \"number\" ? emptyTokens : tokens;\n\n  chains.forEach((chain, chainIndex) => {\n    // tslint:disable-next-line\n    chain.forEach((_value, index) => {\n      type(tmpTokens, css, _value, index, chain, chainIndex, chains);\n    });\n  });\n\n  return css;\n};\n\nexport const background = createPropertyParser(\n  (\n    tokens: any,\n    css: any,\n    value: any,\n    index: any,\n    chain: any,\n    chainIndex: any,\n    chains: any\n  ) => {\n    if (value === \"/\") {\n      return;\n    } else if (value.match(/scroll|local|fixed/))\n      css.backgroundAttachment = setChainedValue(\n        css.backgroundAttachment,\n        value\n      );\n    else if (\n      value.match(/^url|linear-gradient|element|image|cross-fade|image-set/)\n    )\n      css.backgroundImage = setChainedValue(css.backgroundImage, value);\n    else if (value.match(/border-box|padding-box|content-box|text/)) {\n      if (\n        chain.filter((chainPart: any) =>\n          chainPart.match(/border-box|padding-box|content-box|text/)\n        ).length === 1\n      ) {\n        css.backgroundOrigin = setChainedValue(css.backgroundOrigin, value);\n        css.backgroundClip = setChainedValue(css.backgroundClip, value);\n      } else if (\n        chain.findIndex((chainPart: any) =>\n          chainPart.match(/border-box|padding-box|content-box|text/)\n        ) === index\n      ) {\n        css.backgroundOrigin = setChainedValue(css.backgroundOrigin, value);\n      } else {\n        css.backgroundClip = setChainedValue(css.backgroundClip, value);\n      }\n    } else if (chain[index - 1] === \"/\") {\n      css.backgroundSize = setChainedValue(\n        css.backgroundSize,\n        tokens.sizes[value] || value\n      );\n    } else if (\n      value.match(/center|top|right|bottom|left/) ||\n      value.match(unitMatch) ||\n      tokens.sizes[value]\n    )\n      css.backgroundPosition = setChainedValue(\n        css.backgroundPosition,\n        tokens.sizes[value] || value\n      );\n    else if (value.match(/repeat|no-repeat|repeat-x|repeat-y|space|round/))\n      css.backgroundRepeat = setChainedValue(css.backgroundRepeat, value);\n    else {\n      if (chainIndex !== chains.length - 1) {\n        throw new Error(\"You can only add background colors on the last chain\");\n      }\n      css.backgroundColor = setChainedValue(\n        css.backgroundColor,\n        tokens.colors[value] || value\n      );\n    }\n  }\n);\n\nexport const animation = createPropertyParser(\n  (_: any, css: any, value: any, index: any, chain: any) => {\n    if (value.match(easingMatch)) {\n      css.animationTimingFunction = setChainedValue(\n        css.animationTimingFunction,\n        value\n      );\n    } else if (value.match(/^\\d+$|infinite/)) {\n      css.animationIterationCount = setChainedValue(\n        css.animationIterationCount,\n        value\n      );\n    } else if (value.match(/normal|reverse|alternate|alternate-reverse/)) {\n      css.animationDirection = setChainedValue(css.animationDirection, value);\n    } else if (value.match(/none|forward|backwards|both/)) {\n      css.animationFillMode = setChainedValue(css.animationFillMode, value);\n    } else if (value.match(/running|paused/)) {\n      css.animationPlayState = setChainedValue(css.animationPlayState, value);\n    } else if (value.match(unitMatch)) {\n      if (chain.findIndex((part: any) => part.match(unitMatch)) === index) {\n        css.animationDuration = setChainedValue(css.animationDuration, value);\n      } else {\n        css.animationDelay = setChainedValue(css.animationDelay, value);\n      }\n    } else {\n      css.animationName = setChainedValue(css.animationName, value);\n    }\n  }\n);\n\nexport const font = createPropertyParser(\n  (tokens: any, css: any, value: any) => {\n    if (value.match(/^[0-9.]+deg/)) css.fontStyle += ` ${value}`;\n    else if (value.match(/\\//)) {\n      const [fontSize, lineHeight] = value.split(\"/\");\n      css.fontSize = tokens.fontSizes[fontSize] || fontSize;\n      css.lineHeight = tokens.lineHeights[lineHeight] || lineHeight;\n    } else if (\n      value.match(unitMatch) ||\n      value.match(\n        /xx-small|x-small|small|medium|large|x-large|xx-large|xxx-large/\n      ) ||\n      tokens.fontSizes[value]\n    )\n      css.fontSize = tokens.fontSizes[value] || value;\n    else if (value.match(/normal|italic|oblique/)) css.fontStyle = value;\n    else if (value.match(/normal|bold/) || tokens.fontWeights[value])\n      css.fontWeight =\n        value === \"normal\" ? 400 : tokens.fontWeights[value] || 700;\n    else if (value.match(unitMatch) || tokens.fontSizes[value])\n      css.fontSize = tokens.fontSizes[value] || value;\n    else {\n      css.fontFamily = setChainedValue(\n        css.fontFamily,\n        tokens.fonts[value] || value\n      );\n    }\n  }\n);\n\nexport const transition = createPropertyParser(\n  // The whole token is a transition, so need to grab it before passing in here\n  (_: any, css: any, value: any, index: any, chain: any) => {\n    if (value.match(unitMatch)) {\n      if (chain.findIndex((part: any) => part.match(unitMatch)) === index) {\n        css.transitionDuration = setChainedValue(css.transitionDuration, value);\n      } else {\n        css.transitionDelay = setChainedValue(css.transitionDelay, value);\n      }\n    } else if (value.match(easingMatch)) {\n      css.transitionTimingFunction = setChainedValue(\n        css.transitionTimingFunction,\n        value\n      );\n    } else {\n      css.transitionProperty = setChainedValue(css.transitionProperty, value);\n    }\n  }\n);\n\nexport const margin = createPropertyParser(\n  (tokens: any, css: any, value: any, index: any) => {\n    if (index === 0) {\n      css.marginTop = tokens.space[value] || value;\n      css.marginRight = tokens.space[value] || value;\n      css.marginBottom = tokens.space[value] || value;\n      css.marginLeft = tokens.space[value] || value;\n    } else if (index === 1) {\n      css.marginRight = tokens.space[value] || value;\n      css.marginLeft = tokens.space[value] || value;\n    } else if (index === 2) {\n      css.marginBottom = tokens.space[value] || value;\n    } else {\n      css.marginLeft = tokens.space[value] || value;\n    }\n  }\n);\n\nexport const padding = createPropertyParser(\n  (tokens: any, css: any, value: any, index: any) => {\n    if (index === 0) {\n      css.paddingTop = tokens.space[value] || value;\n      css.paddingRight = tokens.space[value] || value;\n      css.paddingBottom = tokens.space[value] || value;\n      css.paddingLeft = tokens.space[value] || value;\n    } else if (index === 1) {\n      css.paddingRight = tokens.space[value] || value;\n      css.paddingLeft = tokens.space[value] || value;\n    } else if (index === 2) {\n      css.paddingBottom = tokens.space[value] || value;\n    } else {\n      css.paddingLeft = tokens.space[value] || value;\n    }\n  }\n);\n\nexport const border = createPropertyParser(\n  (tokens: any, css: any, value: any) => {\n    if (\n      value.match(\n        /none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset/\n      )\n    ) {\n      css.borderTopStyle = value;\n      css.borderRightStyle = value;\n      css.borderBottomStyle = value;\n      css.borderLeftStyle = value;\n    } else if (\n      value.match(unitMatch) ||\n      tokens.borderWidths[value] ||\n      !isNaN(value)\n    ) {\n      css.borderTopWidth = tokens.borderWidths[value] || value;\n      css.borderRightWidth = tokens.borderWidths[value] || value;\n      css.borderBottomWidth = tokens.borderWidths[value] || value;\n      css.borderLeftWidth = tokens.borderWidths[value] || value;\n    } else {\n      css.borderTopColor = tokens.colors[value] || value;\n      css.borderRightColor = tokens.colors[value] || value;\n      css.borderBottomColor = tokens.colors[value] || value;\n      css.borderLeftColor = tokens.colors[value] || value;\n    }\n  }\n);\n\nexport const borderTop = createPropertyParser(\n  (tokens: any, css: any, value: any) => {\n    if (\n      value.match(\n        /none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset/\n      )\n    ) {\n      css.borderTopStyle = value;\n    } else if (value.match(unitMatch) || tokens.borderWidths[value]) {\n      css.borderTopWidth = tokens.borderWidths[value] || value;\n    } else {\n      css.borderTopColor = tokens.colors[value] || value;\n    }\n  }\n);\n\nexport const borderRight = createPropertyParser(\n  (tokens: any, css: any, value: any) => {\n    if (\n      value.match(\n        /none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset/\n      )\n    ) {\n      css.borderRightStyle = value;\n    } else if (value.match(unitMatch) || tokens.borderWidths[value]) {\n      css.borderRightWidth = tokens.borderWidths[value] || value;\n    } else {\n      css.borderRightColor = tokens.colors[value] || value;\n    }\n  }\n);\n\nexport const borderLeft = createPropertyParser(\n  (tokens: any, css: any, value: any) => {\n    if (\n      value.match(\n        /none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset/\n      )\n    ) {\n      css.borderLeftStyle = value;\n    } else if (value.match(unitMatch) || tokens.borderWidths[value]) {\n      css.borderLeftWidth = tokens.borderWidths[value] || value;\n    } else {\n      css.borderLeftColor = tokens.colors[value] || value;\n    }\n  }\n);\n\nexport const borderBottom = createPropertyParser(\n  (tokens: any, css: any, value: any) => {\n    if (\n      value.match(\n        /none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset/\n      )\n    ) {\n      css.borderBottomStyle = value;\n    } else if (value.match(unitMatch) || tokens.borderWidths[value]) {\n      css.borderBottomWidth = tokens.borderWidths[value] || value;\n    } else {\n      css.borderBottomColor = tokens.colors[value] || value;\n    }\n  }\n);\n\nexport const borderWidth = createPropertyParser(\n  (tokens: any, css: any, value: any, index: any) => {\n    if (index === 0) {\n      css.borderTopWidth = tokens.borderWidths[value] || value;\n      css.borderRightWidth = tokens.borderWidths[value] || value;\n      css.borderBottomWidth = tokens.borderWidths[value] || value;\n      css.borderLeftWidth = tokens.borderWidths[value] || value;\n    } else if (index === 1) {\n      css.borderRightWidth = tokens.borderWidths[value] || value;\n      css.borderLeftWidth = tokens.borderWidths[value] || value;\n    } else if (index === 2) {\n      css.borderBottomWidth = tokens.borderWidths[value] || value;\n    } else {\n      css.borderLeftWidth = tokens.borderWidths[value] || value;\n    }\n  }\n);\n\nexport const borderColor = createPropertyParser(\n  (tokens: any, css: any, value: any, index: any) => {\n    if (index === 0) {\n      css.borderTopColor = tokens.colors[value] || value;\n      css.borderRightColor = tokens.colors[value] || value;\n      css.borderBottomColor = tokens.colors[value] || value;\n      css.borderLeftColor = tokens.colors[value] || value;\n    } else if (index === 1) {\n      css.borderRightColor = tokens.colors[value] || value;\n      css.borderLeftColor = tokens.colors[value] || value;\n    } else if (index === 2) {\n      css.borderBottomColor = tokens.colors[value] || value;\n    } else {\n      css.borderLeftColor = tokens.colors[value] || value;\n    }\n  }\n);\n\nexport const borderStyle = createPropertyParser(\n  (tokens: any, css: any, value: any, index: any) => {\n    if (index === 0) {\n      css.borderTopStyle = value;\n      css.borderRightStyle = value;\n      css.borderBottomStyle = value;\n      css.borderLeftStyle = value;\n    } else if (index === 1) {\n      css.borderRightStyle = value;\n      css.borderLeftStyle = value;\n    } else if (index === 2) {\n      css.borderBottomStyle = value;\n    } else {\n      css.borderLeftStyle = value;\n    }\n  }\n);\n\nexport const borderRadius = createPropertyParser(\n  (tokens: any, css: any, value: any, index: any) => {\n    if (index === 0) {\n      css.borderBottomLeftRadius = tokens.radii[value] || value;\n      css.borderTopLeftRadius = tokens.radii[value] || value;\n      css.borderTopRightRadius = tokens.radii[value] || value;\n      css.borderBottomRightRadius = tokens.radii[value] || value;\n    } else if (index === 1) {\n      css.borderTopRightRadius = tokens.radii[value] || value;\n      css.borderBottomLeftRadius = tokens.radii[value] || value;\n    } else if (index === 2) {\n      css.borderBottomRightRadius = tokens.radii[value] || value;\n    } else if (index === 3) {\n      css.borderBottomLeftRadius = tokens.radii[value] || value;\n    }\n  }\n);\n\nexport const boxShadow = (tokens: any, value: string) => {\n  return {\n    boxShadow: tokenizeValue(value)\n      .map((chain) => chain.map((val) => tokens.colors[val] || val).join(\" \"))\n      .join(\", \"),\n  };\n};\n"]}